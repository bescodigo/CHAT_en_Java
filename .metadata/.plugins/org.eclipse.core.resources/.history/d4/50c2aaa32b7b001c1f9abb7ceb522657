package main;

import java.awt.TextArea;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;

import paqueteDatos.PaqueteDatos;

public class MarcoServer extends JFrame{
	
	public MarcoServer() {
		
		LaminaServer lamina = new LaminaServer();
		
		
		this.setBounds(111,111,666,666);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		this.add(lamina);		
		
		this.setVisible(true);
		this.setTitle("ServerMessenger");
		
	}
	
	
	public class LaminaServer extends JPanel implements Runnable{
		
		public LaminaServer() {
			
			this.setVisible(true);
			
			area = new JTextArea(20, 40);
			
			this.add(area);
			
			
			Thread hilo = new Thread(this);
			
			hilo.start();
			
		}
		
		
		


		@Override
		public void run() {
			
			
			try {
				
				ServerSocket conexionRecibida = new ServerSocket(9999);
				
				String ip, nick, mensaje;
				
				PaqueteDatos datosRecibidos;
				
				ArrayList<String> listIps = new ArrayList<String>();
				
				while(true) {
					
					Socket conexionAceptada = conexionRecibida.accept();
					
					ObjectInputStream flujoEntrada = new ObjectInputStream(conexionAceptada.getInputStream());
					
					datosRecibidos =(PaqueteDatos) flujoEntrada.readObject();
					
					
					ip = datosRecibidos.getIp();
					nick = datosRecibidos.getNick();
					mensaje = datosRecibidos.getMensaje();
					
					if(datosRecibidos.getMensaje().equals("online")) {
						
						InetAddress clienteConectado = conexionAceptada.getInetAddress();
						
						String ipRemota = clienteConectado.getHostAddress();
						
						System.out.println("se conecto: "+ ipRemota);
						
						
						listIps.add(ipRemota);
						
						datosRecibidos.setIps(listIps);
						
						for(String z :listIps) {
							
							Socket socketReenvio = new Socket(z, 9090);
							
							ObjectOutputStream flujoReenvio = new ObjectOutputStream(socketReenvio.getOutputStream());
							
							flujoReenvio.writeObject(datosRecibidos);
							
						}
						
//						TODO: Close connection.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
						
						
					}else {
						
						
						
					}
					
					
					
					
				}
			
			
			
			} catch (IOException | ClassNotFoundException e) {
				// TODO Auto-generated catch block
					e.printStackTrace();
			}
			
		}
		
		
		JTextArea area;
	}
	
	
}
